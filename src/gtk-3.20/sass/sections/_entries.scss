%entry, entry {
	%entry_basic, & {
		min-height: 24px;
		padding: 2px 6px;
		border: 1px solid;
		border-radius: $omega1;
		caret-color: currentColor;
		@include entry(normal);
		image {
			&.left {
				margin-right: 6px;
			}
			&.right {
				margin-left: 6px;
			}
		}
		undershoot {
			&.left {
				@include undershoot(left);
			}
			&.right {
				@include undershoot(right);
			}
		}
		&.flat {
			&:focus, & {
				min-height: 0;
				padding: 2px;
				background-color: transparent;
				border-color: transparent;
				border-radius: 0;
			}
		}
		&:focus {
			@include entry(focus);
			transition: $tran1;
		}
		&:disabled {
			@include entry(insensitive);
		}
		&:backdrop {
			@include entry(backdrop);
			transition: $backdrop_transition;
		}
		&:backdrop:disabled {
			@include entry(backdrop-insensitive);
		}
		selection {
			@extend %selected_items;
		}
		
		@each $e_type, $e_color in
		(error, $failure),
                (warning, $warning) {
			&.#{$e_type} {
			color: $e_color;
			border-color: entry_focus_border($e_color);
			&:focus {
				@include entry(focus);
			}
			&:not(:focus) {
				border-color: $borders_color;
			}
			&:backdrop {
				border-color: $backdrop_borders_color;
			}
			selection {
				background-color: $e_color;
			}
		}
	}
	image {
		color: $white;
		&:hover {
			color: $accent2;
		}
		&:active {
			color: $accent3;
		}
		&:backdrop {
			color: $accent1;
		}
	}
	&:drop(active) {
		&:focus, & {
			border-color: $drop_target_color;
			box-shadow: inset 0 0 0 1px $drop_target_color;
		}
	}
	.osd & {
		@include entry(osd);
		&:focus {
			@include entry(osd-focus);
		}
		&:backdrop {
			@include entry(osd-backdrop);
		}
		&:disabled {
			@include entry(osd-insensitive);
		}
	}
}

progress {
	margin: 2px -6px;
	background-color: transparent;
	background-image: none;
	border-radius: 0;
	border-width: 0 0 2px;
	border-color: $neutral_color;
	border-style: solid;
	box-shadow: none;
	&:backdrop {
		background-color: transparent;
	}
}


.linked:not(.vertical) > & {
	@extend %linked;
}
.linked:not(.vertical) > &:focus + &,
.linked:not(.vertical) > &:focus + button,
.linked:not(.vertical) > &:focus + combobox > box > button.combo {
	transition: $tran1;
	border-left-color: entry_focus_border();
}
.linked:not(.vertical) > &:focus.error + &,
.linked:not(.vertical) > &:focus.error + button,
.linked:not(.vertical) > &:focus.error + combobox > box > button.combo {
	transition: $tran1;
	border-left-color: entry_focus_border($failure);
}
.linked:not(.vertical) > &:focus.warning + &,
.linked:not(.vertical) > &:focus.warning + button,
.linked:not(.vertical) > &:focus.warning + combobox > box > button.combo {
	transition: $tran1; 
	border-left-color: entry_focus_border($warning_color); }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo { border-left-color: $drop_target_color; }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @extend %linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($borders_color, $base_color, 30%);

      &:backdrop { border-top-color: mix($backdrop_borders_color, $backdrop_base_color, 30%); }
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled { border-top-color: mix($borders_color, $base_color, 30%); }

    // color back the top border of a linked focused entry following another entry.
    // :not(:only-child) is a specificity bump hack.
    + %entry:focus:not(:only-child),
    + entry:focus:not(:only-child) { border-top-color: entry_focus_border(); }

    + %entry:focus.error:not(:only-child),
    + entry:focus.error:not(:only-child) { border-top-color: entry_focus_border($error_color); }

    + %entry:focus.warning:not(:only-child),
    + entry:focus.warning:not(:only-child) { border-top-color: entry_focus_border($warning_color); }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) { border-top-color: $drop_target_color; }

    // this takes care of coloring the top border of the focused entry subsequent widget.
    // :not(:only-child) is a specificity bump hack.
    &:focus:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border(); }
    }

    &:focus.error:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border($error_color); }
    }

    &:focus.warning:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border($warning_color); }
    }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: $drop_target_color; }
    }
  }
}

treeview, row {
  &:focus {
    outline-color: transparentize(white, 0.2);
    outline-offset: -2px;
    -gtk-outline-radius: $small_radius;
  }

  &:backdrop:hover { background-color: lighten($base_hover_color, 20%); }
}

treeview entry {
  &:focus {
    &:dir(rtl), &:dir(ltr) { // specificity bump hack
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus { border-color: $selected_bg_color; }
  }
}

.entry-tag {
  // sizing
  padding: 5px;
  margin-top: 4px; 
  margin-bottom: 4px;
  // side margins: compensate the entry padding with a negative margin
  // then the negative margin itself
  :dir(ltr) & {
    margin-left: 8px;
    margin-right: -3px;
  }
  :dir(rtl) & {
    margin-left: -5px;
    margin-right: 8px;
  }
  border-color: transparent;
  background-color: $slate;
  color: darken($silk, 3%);
  &.button:hover { color: white; }
}
