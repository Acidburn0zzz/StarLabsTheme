spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;

    padding: 0;

    entry {
      min-width: 28px;
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;

      &:backdrop:disabled { background-color: transparent; }
    }

    button {
      min-height: 16px;
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      color: mix($fg_color, $base_color, 90%);
      border-style: none none none solid;
      background-color: transparent;
      border-color: $borders_color;
      border-radius: 0;
      box-shadow: none;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        background-color: if($light, darken($bg_color, 3%), lighten($bg_color, 15%));

        &:backdrop {
            background-color: lighten($backdrop_bg_color, 8%);
        }
      }

      &:disabled {
        color: transparentize($insensitive_fg_color, 0.4);
        background-color: transparent;
        border-color: $insensitive_borders_color;
      }

      &:active {
        background-color: transparentize(black, 0.9);
        box-shadow: inset 0 2px 3px -1px transparentize(black, 0.8);
      }

      &:backdrop {
        color: mix($backdrop_fg_color, $backdrop_base_color, 90%);
        background-color: transparent;
        border-color: $backdrop_borders_color;
        transition: $backdrop_transition;

        &:disabled {
            color: transparentize($insensitive_fg_color, 0.5);
            background-color: transparent;
            border-style: none none none solid; // It is needed or it gets overridden
            border-color: transparentize($backdrop_borders_color, 0.3);

            &:dir(rtl) { border-style: none solid none none; }
        }
      }

      &:dir(ltr):last-child { border-radius: 0 $small_radius $small_radius 0; }

      &:dir(rtl):first-child { border-radius: $small_radius 0 0 $small_radius; }
    }
  }

  // OSD horizontal
  .osd &:not(.vertical) {
    button {
      @include clickable(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentize($osd_borders_color, 0.3);
      border-radius: 0;
      box-shadow: none;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        @include clickable(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        background-color: transparentize($osd_fg_color, 0.9);
        box-shadow: none;
      }

      &:backdrop {
        @include clickable(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        box-shadow: none;
      }

      &:disabled {
        @include clickable(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        box-shadow: none;
      }

      &:dir(ltr):last-child { border-radius: 0 $small_radius $small_radius 0; }

      &:dir(rtl):first-child { border-radius: $small_radius 0 0 $small_radius; }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: $insensitive_fg_color; }

    &:backdrop:disabled { color: $backdrop_insensitive_color; }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    entry {
      min-height: 32px;
      min-width: 32px;
      padding: 0;
      border-radius: 0;

      &:backdrop {
        border-color: $backdrop_borders_color;
        &:disabled { border-color: transparentize($backdrop_borders_color, 0.3); }
      }
      &:disabled { border-color: $insensitive_borders_color; }
    }

    button {
      min-height: 32px;
      min-width: 32px;
      padding: 0;

      &.up { @extend %top_button; }

      &.down { @extend %bottom_button; }
    }

    %top_button {
      border-radius: $small_radius $small_radius 0 0;
      border-style: solid solid none solid;
    }

    %bottom_button {
      border-radius: 0 0 $small_radius $small_radius;
      border-style: none solid solid solid;
    }
  }

  // OSD vertical
  .osd &.vertical button:first-child {
    @include clickable(osd);

    &:hover { @include clickable(osd-hover);}

    &:active { @include clickable(osd-active); }

    &:disabled { @include clickable(osd-insensitive); }

    &:backdrop { @include clickable(osd-backdrop); }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    entry {
      min-height: 0;
      padding: 1px 2px;
    }
  }
}
