// Drawing mixins
// generic drawing of more complex things


@function _backdrop_color($c) {
  //
  // adjusts colors for use in the backdrop state
  //
  @if $light {
    @return if($c!=white, lighten($c, 5%), transparentize(white, 0.3));
  }
  @else {
    @if $c==$selected_bg_color or $c==$hb_pathbar_bg {
      @return lighten($c, 5%);
    } @else {
      @return darken($c, 2%);
    }
  }
}

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}


@import 'functions/buttons';
/***************************
 * Check and Radio buttons *
 ***************************/

@mixin check($t, $c:white, $tc:white) {
  // Check/Radio drawing function
  //
  // $t:    check/radio type,
  // $c:    base button color for colored* types
  // $tc:   optional text color for colored* types
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive

  $_checked: $c == $success_color;
  $_border_color: if($_checked, $c, if($variant == 'light', $borders_color, white));
  $_dim_border_color: transparentize($_border_color, if($variant == 'light', 0.3, 0.7));
  $_dim_background: if($variant == 'light', $dark_fill, $slate);

  @if $t==normal  {
    background-clip: if($_checked, border-box, padding-box);
    background-color: $c;
    border-color: $_border_color;
    box-shadow: 0 1px transparentize(black, 0.95);
    color: $tc;
  }

  @if $t==hover {
    -gtk-icon-effect: highlight;
    background-color: if($c == white, darken($c, 5%), lighten($c, 5%));
  }

  @if $t==active {
    box-shadow: inset 0 1px 1px 0px if($variant == 'light', rgba(0, 0, 0, 0.2), black);
  }

  @if $t==insensitive {
    $_bg: if($_checked, $_dim_background , transparent);
    background-color: $_bg;
    border-color: if($_checked, $_bg, $_dim_border_color);
    box-shadow: none;
    color: transparentize($tc, 0.3);
  }

  @if $t==backdrop {
    -gtk-icon-effect: dim;

    background-color: if($_checked, _backdrop_color($c), $bg_color);
    border-color: $_dim_border_color;
    box-shadow: 0 1px transparentize(black, 0.95);
    color: $tc;
  }

  @if $t==backdrop-hover {
    -gtk-icon-effect: highlight;
    background-color: if($c != white, lighten($c, 9%), darken($c, 7%));
  }

  @if $t==backdrop-insensitive {
    -gtk-icon-effect: dim;

    $_bg: if($_checked, $_dim_background, transparent);
    background-color: $_bg;
    border-color: if($_checked, $_bg, $_dim_border_color);
    box-shadow: none;
    color: transparentize($tc, 0.6);
  }
}



/**************************
 * Overshoot & Undershoot *
 **************************/
@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(transparentize($_small_gradient_color, 1)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(transparentize($_big_gradient_color, 0.93)),
                                to(transparentize($_big_gradient_color, 1)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//
  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;

  // Replace dashed line with light shadow
  $_us_shadow_color: if($variant=='light', $silk, lighten($jet, 8%));
  $_us_shadow_alpha: 0.8;

  @if ($p == left) {
    box-shadow: inset 2px 0 0 transparentize($_us_shadow_color,$_us_shadow_alpha),
                inset 1px 0 0 transparentize(darken($_us_shadow_color,20%),$_us_shadow_alpha);
  }
  @else if ($p == right) {
    box-shadow: inset -2px 0 0 transparentize($_us_shadow_color,$_us_shadow_alpha),
                inset -1px 0 0 transparentize( darken($_us_shadow_color,20%),$_us_shadow_alpha);
  }
  @else if ($p == top) {
    box-shadow: inset 0 2px 0 0 transparentize($_us_shadow_color,$_us_shadow_alpha),
                inset 0 1px 0 0 transparentize(darken($_us_shadow_color,20%),$_us_shadow_alpha);
  }
  @else if ($p == bottom) {
      box-shadow: inset 0 -2px 0 0 transparentize($_us_shadow_color,$_us_shadow_alpha),
                  inset 0 -1px 0 0 transparentize(darken($_us_shadow_color,20%),$_us_shadow_alpha);
  }
}


