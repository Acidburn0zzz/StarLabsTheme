
/****************
 * Text Entries *
 ****************/
%entry, entry {
	%entry_basic, & {
		min-height: 24px;
		padding: 2px 6px;
		border: 1px solid;
		border-radius: $omega1;
		caret-color: currentColor;
		@include entry(normal);
		image {
			&.left {
				margin-right: 6px;
			}
			&.right {
				margin-left: 6px;
			}
		}
	undershoot {
		&.left {
			@include undershoot(left);
		}
		&.right {
			@include undershoot(right);
		}
	}
	&.flat {
		&:focus, & {
			min-height: 0;
			padding: 2px;
			background-color: transparent;
			border-color: transparent;
			border-radius: 0;
		}
	}
	&:focus {
		@include entry(focus);
	}
	&:disabled {
		@include entry(disabled);
	}
	&:backdrop {
		@include entry(backdrop);
	}
	selection {
		@extend %selected_text;
	}
	@each $e_type, $e_color in
	(error, $failure),
	(warning, $warning) {
		&.#{$e_type} {
			color: $e_color;
			border-color: entry_focus_border($e_color);
			&:focus {
				@include entry(focus);
			}
			selection {
				background-color: $e_color;
			}
		}
	}
	image {
		color: if($variant==light, $dark1, $white);
	}
	&:drop(active) {
		&:focus, & {
			box-shadow: $shadow2;
		}
	}
	.osd & {
		@include entry(normal);
		&:focus {
			@include entry(focus);
		}
		&:backdrop {
			@include entry(backdrop);
		}
		&:disabled {
			@include entry(disabled);
		}
	}
}

progress {
	margin: 2px -6px;
	background-color: transparent;
	background-image: none;
	border-radius: 0;
	border-width: 0 0 2px;
	border-style: solid;
	box-shadow: none;
	&:backdrop {
		background-color: transparent;
	}
}

// linked entries
.linked:not(.vertical) > & {
	@extend %linked;
}
.linked:not(.vertical) > &:focus + &,
.linked:not(.vertical) > &:focus + button,
.linked:not(.vertical) > &:focus + combobox > box > button.combo {
	transition: $click;
//	border-left-color: $accent2;
}
.linked:not(.vertical) > &:drop(active) + &,
.linked:not(.vertical) > &:drop(active) + button,
.linked:not(.vertical) > &:drop(active) + combobox > box > button.combo {
//	border-left-color: $accent2;
}

// Vertically linked entries
.linked.vertical > & {
	@extend %linked_vertical;
	&:not(:disabled) + entry:not(:disabled),
	&:not(:disabled) + %entry:not(:disabled) {
//		border-top-color: $accent2;
		&:backdrop {
//			border-top-color: lighten($accent2, $beta1);
		}
	}
	// brighter border between linked insensitive entries
	&:disabled + %entry:disabled,
	&:disabled + entry:disabled {
//		border-top-color: mix($borders_color, $base_color, 30%);
	}
	// color back the top border of a linked focused entry following another entry.
	// :not(:only-child) is a specificity bump hack.
	+ %entry:focus:not(:only-child),
	+ entry:focus:not(:only-child) {
//		border-top-color: $selected_bg_color;
	}
	+ %entry:drop(active):not(:only-child),
	+ entry:drop(active):not(:only-child) {
//		border-top-color: $drop_target_color;
	}
	// this takes care of coloring the top border of the focused entry subsequent widget.
	// :not(:only-child) is a specificity bump hack.
	&:focus:not(:only-child) {
		+ %entry,
		+ entry,
		+ button,
		+ combobox > box > button.combo {
//			border-top-color: $selected_bg_color;
		}
	}
	&:drop(active):not(:only-child) {
		+ %entry,
		+ entry,
		+ button,
		+ combobox > box > button.combo {
//			border-top-color: $drop_target_color;
		}
	}
	}
}

treeview entry {
	&:focus {
		&:dir(rtl), &:dir(ltr) { // specificity bump hack
			background-color: $base_color;
			transition-property: color, background;
		}
	}
	&.flat, & {
		border-radius: 0;
		background-image: none;
		background-color: $base_color;
		&:focus {
//			border-color: $selected_bg_color;
		}
	}
}

.entry-tag {
	padding: 5px;
	margin-top: 2px;
	margin-bottom: 2px;
	:dir(ltr) & {
		margin-left: 8px;
		margin-right: -5px;
	}
	:dir(rtl) & {
		margin-left: -5px;
		margin-right: 8px;
	}
	border-style: none;
	@include fill(normal);
	&:hover {
		@include clickable(normal);
	}
	&:backdrop {
		@include fill(backdrop);
	}
	&.button {
		background-color: transparent;
		color: if($variant==light, $dark1, $white);
	}
	:not(:backdrop) &.button {
		&:hover {
			@include clickable(hover);
		}
		&:active {
			@include clickable(active);
		}
	}
}

