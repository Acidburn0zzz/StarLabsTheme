

/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


//selection-mode
@each $s,$as in ('','-selectionmode'),
                  (':hover', '-hover-selectionmode'),
                  (':active', '-active-selectionmode'),
                  (':backdrop', '-backdrop-selectionmode'),
                  (':checked', '-checked-selectionmode'),
                  (':checked:hover', '-checked-hover-selectionmode'),
                  (':checked:active', '-checked-active-selectionmode'),
                  (':backdrop:checked', '-checked-backdrop-selectionmode') {
  .view.content-view.check#{$s}:not(list),
  .content-view .tile check#{$s}:not(list) {
    -gtk-icon-source: -gtk-scaled(url("assets/checkbox#{$as}.png"), url("assets/checkbox#{$as}@2.png"));
    background-color: transparent;
    min-width: 30px;
    min-height: 30px;
    background-image: none;
    transition: none;
    box-shadow: none;
    border-width: 0;
  }
}

checkbutton.text-button, radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px 0;
  -gtk-outline-radius: $omega1;
  outline-offset: 0;

  label:not(:only-child) {
    &:first-child { margin-left: 4px; }
    &:last-child { margin-right: 4px; }
  }
}

check,
radio {
  margin: 0 4px;

  &:only-child { margin: 0; }

  popover & { // when in a popover add more space between the label and the check, reset the other side margin.
              // See https://bugzilla.gnome.org/show_bug.cgi?id=779570 for details.
    &.left:dir(rtl) {
      margin-left: 0;
      margin-right: 12px;
    }

    &.right:dir(ltr) {
      margin-left: 12px;
      margin-right: 0;
    }
  }

  min-height: 14px;
  min-width: 14px;
  padding: 1px;
  -gtk-icon-source: none;

  &:backdrop { transition: $backdrop; }

  menu menuitem &, popover & {
    margin: 0; // this is a workaround for a menu check/radio size allocation issue
  }
}

%check, %radio, check, radio {
  & {
    // for unchecked
    border: 1px solid;
    $_c: if($light, white, $bg_color);

    @each $state, $t in ("", "normal"),
                        (":hover", "hover"),
                        (":hover:backdrop", "backdrop-hover"),
                        (":active", "active"),
                        (":disabled", "insensitive"),
                        (":backdrop", "backdrop"),
                        (":backdrop:disabled", 'backdrop-insensitive') {
      &#{$state} {
        @include check($t, $_c);
      }
    }
  }

  & {
    // for checked
    @each $t in (':checked:not(:indeterminate)'), (':indeterminate') {
      &#{$t} {
        @each $state, $t in ("", "normal"),
                            (":hover", "hover"),
                            (":hover:backdrop", "backdrop-hover"),
                            (":disabled", "insensitive"),
                            (":backdrop", "backdrop"),
                            (":backdrop:disabled", 'backdrop-insensitive') {
          &#{$state} {
            @include check($t, $success);
          }
        }
      }
    }
  }
}

%check,
check {
  border-radius: 3px;

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/check-symbolic.symbolic.png")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/dash-symbolic.symbolic.png")); }
}

%radio,
radio {
  border-radius: 100%;

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/bullet-symbolic.symbolic.png")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/dash-symbolic.symbolic.png")); }
}


// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
radio:not(:indeterminate):not(:checked):active:not(:backdrop) { -gtk-icon-transform: scale(0); }

check:not(:indeterminate):not(:checked):active:not(:backdrop) { -gtk-icon-transform: translate(6px, -3px) rotate(-45deg) scaleY(0.2) rotate(45deg) scaleX(0); }

radio,
check {
  &:active { -gtk-icon-transform: scale(0, 1); } // should tackle the indeterminate state, untested

  &:checked:not(:backdrop), &:indeterminate:not(:backdrop) {
    -gtk-icon-transform: unset;
    transition: 400ms;
  }
}

menu menuitem, popover, treeview.view {
  // make menuitem, popover and treeview checks and radios smaller
  check, radio {
    padding: 1px;
  }
}

treeview.view {
  radio, check {
    @each $t, $c in (':checked:not(:indeterminate)', $success),
                    (':indeterminate', $success) {
        &#{$t} {
        &, &:hover { background-color: $c; color: white }
        &:backdrop { background-color: _backdrop_color($c); }
      }
    }
  }
}
