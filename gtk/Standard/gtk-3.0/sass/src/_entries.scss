%entry, entry {
	%entry_basic, & {
		min-height: 24px;
		padding: 2px 6px;
		border-radius: $omega1;
		caret-color: currentColor;
		@include entry;
		image {
			&.left {
				margin-right: 6px;
			}
			&.right {
				margin-left: 6px;
			}
		}
		undershoot {
			&.left {
				@include undershoot(left);
			}
			&.right {
				@include undershoot(right);
			}
		}
		selection {
			@extend %selected_text;
		}
		image {
//			color: mix($color, $base_color, 80%);
			&:hover {
				color: $accent2;
			}
			&:active {	
				color: $accent3;
			}
		}
		&:drop(active) {
			&:focus, & {
				border-color: $success;
				box-shadow: inset 0 0 0 1px $success;
			}
		}

	.osd & {
		@include entry;
	}
}

progress {
	margin: 2px -6px;
	background-color: transparent;
	background-image: none;
	border-radius: 0;
	border-width: 0 0 2px;
//	border-color: $mix;
	border-style: solid;
	box-shadow: none;
	&:backdrop {
		background-color: transparent;
	}
}

 // linked entries
.linked:not(.vertical) > & {
	@extend %linked;
}
.linked:not(.vertical) > &:focus + &,
.linked:not(.vertical) > &:focus + button,
.linked:not(.vertical) > &:focus + combobox > box > button.combo {
	transition: $click;
	border-left-color: $accent2;
}

.linked:not(.vertical) > &:drop(active) + &,
.linked:not(.vertical) > &:drop(active) + button,
.linked:not(.vertical) > &:drop(active) + combobox > box > button.combo {
//	border-left-color: $success;
}

// Vertically linked entries
// FIXME: take care of "colored" entries
.linked.vertical > & {
	@extend %linked_vertical;
	// brighter border between linked entries
	&:not(:disabled) + entry:not(:disabled), &:not(:disabled) + %entry:not(:disabled) {
//		border-top-color: mix($borders_color, $base_color, 30%);
		&:backdrop {
//			border-top-color: mix($backdrop_borders_color, $backdrop_base_color, 30%);
		}
	}
	// brighter border between linked insensitive entries
	&:disabled + %entry:disabled, &:disabled + entry:disabled {
//		border-top-color: mix($borders_color, $base_color, 30%);
	}
	// color back the top border of a linked focused entry following another entry.
	// :not(:only-child) is a specificity bump hack.
	+ %entry:focus:not(:only-child), + entry:focus:not(:only-child) {
//		border-top-color: $selected_bg_color;
	}
	+ %entry:drop(active):not(:only-child), + entry:drop(active):not(:only-child) {
		border-top-color: $success;
	}
	// this takes care of coloring the top border of the focused entry subsequent widget.
	// :not(:only-child) is a specificity bump hack.
	&:focus:not(:only-child) {
		+ %entry, + entry, + button, + combobox > box > button.combo {
//			border-top-color: $selected_bg_color;
		}
	}
	&:drop(active):not(:only-child) {
		+ %entry, + entry, + button, + combobox > box > button.combo {
//			border-top-color: $success;
		}
	}
}
}

treeview, row {
	&:focus {
		outline-color: transparentize(white, 0.2);
		outline-offset: -2px;
		-gtk-outline-radius: $omega1;
	}
	&:backdrop:hover {
//		background-color: lighten($base_hover_color, 20%);
	}
}

treeview entry {
	&:focus {
		&:dir(rtl), &:dir(ltr) { // specificity bump hack
//			background-color: $base_color;
			transition-property: color, background;
		}
	}
	&.flat, & {
		border-radius: 0;
		background-image: none;
//		background-color: $base_color;
		&:focus {
//			border-color: $selected_bg_color;
		}
	}
}

.entry-tag {
// sizing
	padding: 5px;
	margin-top: 2px;
	margin-bottom: 2px;
	// side margins: compensate the entry padding with a negative margin
	// then the negative margin itself
	:dir(ltr) & {
		margin-left: 8px;
		margin-right: -5px;
	}
	:dir(rtl) & {
		margin-left: -5px;
		margin-right: 8px;
	}
	border-style: none;
	color: $fill;
	background-color: $bd-selected;
	&:hover {
		background-color: $accent3;
	}
	:backdrop & {
		color: $bd-fill;
		background-color: $bd-selected;
	}
	&.button {
		background-color: transparent;
		color: transparentize($fill, $alpha2);
	}
	:not(:backdrop) &.button {
		&:hover {
			border: 1px solid $accent2;
			color: $fill;
		}
		&:active {
			background-color: $accent2;
			color: transparentize($fill, $alpha2);
		}
	}
}
